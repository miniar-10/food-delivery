// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Bon_appetit.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 3 "C:\Users\miniar\Desktop\Personal\Bon-appetit\Components\ProductList.razor"
using Bon_appetit.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\miniar\Desktop\Personal\Bon-appetit\Components\ProductList.razor"
using Bon_appetit.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\miniar\Desktop\Personal\Bon-appetit\Components\ProductList.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
    public partial class ProductList : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 92 "C:\Users\miniar\Desktop\Personal\Bon-appetit\Components\ProductList.razor"
 
    IEnumerable<ProductRating> RatingList;
    int currentRating = 0;
    Food selectedProduct;
    int selectedProductId;
    int VoteCount=0;

    void SelectProduct(int productId)
    {
      selectedProductId = productId;
        selectedProduct = ProductService.GetAll().First(x => x.FoodId == productId);
        RatingList = ProductService.GetRating(productId);
        GetCurrentRating();
    }

    
    
    string voteLabel;

    void GetCurrentRating()
    {
      if(RatingList.Count()==0)
      {
            currentRating = 0;
            VoteCount = 0;
       }
      else
      {

            VoteCount = RatingList.Count();
            int sumrating=0;
            foreach(ProductRating Rate in RatingList)
            {
                sumrating += Rate.Rate;
            }
        voteLabel = VoteCount > 1 ? "Votes" : "Vote";
        currentRating =sumrating / VoteCount;
      }

      System.Console.WriteLine($"Current rating for {selectedProduct.FoodId}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
      System.Console.WriteLine($"Rating received for {selectedProduct.FoodId}: {rating}");
      ProductService.AddRating(selectedProduct, rating);
      SelectProduct(selectedProductId);
        
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AllFoodService ProductService { get; set; }
    }
}
#pragma warning restore 1591
